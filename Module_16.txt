Database:
An organized collection of information or data.

Spreadsheets:
 
 ->Designed for a single user or a small

 ->Store less data

Databases:

 ->Accessed by multiple people simultaneously

 ->Store massive amounts of data

 ->Perform complex tasks while accessing data

Relational database:
A structured database containing tables that are related to each other.

 Primary key: A column where every row has a unique entry. 

 Foreign key: A column in a table that is a primary key in another table.

SQL (Structure Query Language):
A programming language used to create, interact with, and request information from a database.

Query:
A request for data from a database table or a combination of tables.

Log:
A record of events that occur within an organization's systems.

Differences between Linux and SQL filtering:
Although both Linux and SQL allow you to filter through data, there are some differences that affect which one you should choose.

 Purpose:
 Linux filters data in the context of files and directories on a computer system. It’s used for tasks like searching for specific 
 files, manipulating file permissions, or managing processes. 

 SQL is used to filter data within a database management system. It’s used for querying and manipulating data stored in tables and 
 retrieving specific information based on defined criteria. 

 Syntax:
 Linux uses various commands and command-line options specific to each filtering tool. Syntax varies depending on the tool and 
 purpose. Some examples of Linux commands are find, sed, cut, e grep

 SQL uses the Structured Query Language (SQL), a standardized language with specific keywords and clauses for filtering data 
 across different SQL databases. Some examples of SQL keywords and clauses are WHERE, SELECT, JOIN.

 Structure:
 SQL offers a lot more structure than Linux, which is more free-form and not as tidy.

 For example, if you wanted to access a log of employee log-in attempts, SQL would have each record separated into columns. Linux 
 would print the data as a line of text without this organization. As a result, selecting a specific column to analyze would be 
 easier and more efficient in SQL.

 In terms of structure, SQL provides results that are more easily readable and that can be adjusted more quickly than when using 
 Linux.

 Joining tables:
 Some security-related decisions require information from different tables. SQL allows the analyst to join multiple tables 
 together when returning data. Linux doesn’t have that same functionality; it doesn’t allow data to be connected to other 
 information on your computer. This is more restrictive for an analyst going through security logs.

 Best uses:
 As a security analyst, it’s important to understand when you can use which tool. Although SQL has a more organized structure and 
 allows you to join tables, this doesn’t mean that there aren’t situations that would require you to filter data in Linux.

 A lot of data used in cybersecurity will be stored in a database format that works with SQL. However, other logs might be in a 
 format that is not compatible with SQL. For instance, if the data is stored in a text file, you cannot search through it with SQL. 
 In those cases, it is useful to know how to filter in Linux. 

Basic SQL querys:
Chinook is an example of a databasethat is used in these queries.

 SELECT:
 The SELECT keyword indicates which columns to return. For example, you can return the customerid column from the Chinook database 
 with

 SELECT customerid

 You can also select multiple columns by separating them with a comma. For example, if you want to return both the customerid and 
 city columns, you should write SELECT customerid, city.

 If you want to return all columns in a table, you can follow the SELECT keyword with an asterisk (*). The first line in the query 
 will be SELECT *.

 FROM:
 The SELECT keyword always comes with the FROM keyword. FROM indicates which table to query. To use the FROM keyword, you should 
 write it after the SELECT keyword, often on a new line, and follow it with the name of the table you’re querying. If you want to 
 return all columns from the customers table, you can write:

 SELECT *

 FROM customers;

 When you want to end the query here, you put a semicolon (;) at the end to tell SQL that this is the entire query.

 ORDER BY:
 Database tables are often very complicated, and this is where other SQL keywords come in handy. ORDER BY is an important keyword 
 for organizing the data you extract from a table.

 ORDER BY sequences the records returned by a query based on a specified column or columns. This can be in either ascending or 
 descending order.
 
  Sorting in ascending order:
  To use the ORDER BY keyword, write it at the end of the query and specify a column to base the sort on. In this example, SQL 
  will return the customerid, city, and country columns from the customers table, and the records will be sequenced by the city 
  column:
  SELECT customerid, city, country
  FROM customers
  ORDER BY city;

  Sorting in descending order:
  You can also use the ORDER BY with the DESC keyword to sort in descending order. The DESC keyword is short for "descending" and 
  tells SQL to sort numbers from largest to smallest, or alphabetically from Z to A. This can be done by following ORDER BY with 
  the DESC keyword. For example, you can run this query to examine how the results differ when DESC is applied: 
  SELECT customerid, city, country
  FROM customers
  ORDER BY city DESC;

  Sorting based on multiple columns:
  You can also choose multiple columns to order by. For example, you might first choose the country and then the city column. SQL 
  then sorts the output by country, and for rows with the same country, it sorts them based on city. You can run this to explore 
  how SQL displays this:
  SELECT customerid, city, country
  FROM customers
  ORDER BY country, city;

 WHERE:
 To create a filter in SQL, you need to use the keyword WHERE. WHERE indicates the condition for a filter.

 If you needed to email employees with a title of IT Staff, you might use a query like the one in the following example. You can 
 run this example to examine what it returns: 
 SELECT firstname, lastname, title, email
 FROM employees
 WHERE title = 'IT Staff';

  Wildcards:
  A wildcard is a special character that can be substituted with any other character. Two of the most useful wildcards are the 
  percentage sign (%) and the underscore (_).
  These wildcards can be placed after a string, before a string, or in both locations depending on the pattern you’re filtering for.

  LIKE:
  To apply wildcards to the filter, you need to use the LIKE operator instead of an equals sign (=). LIKE is used with WHERE to 
  search for a pattern in a column. 

  For instance, if you want to email employees with a title of either 'IT Staff' or 'IT Manager', you can use LIKE operator 
  combined with the % wildcard:  
  SELECT lastname, firstname, title, email
  FROM employees
  WHERE title LIKE 'IT%';

  Comparison operators:
  In SQL, filtering numeric and date and time data often involves operators. You can use the following operators in your filters 
  to make sure you return only the rows you need.
  Note: You can also use != as an alternative operator for not equal to.

   Incorporating operators into filters:
   These comparison operators are used in the WHERE clause at the end of a query. The following query uses the > operator to 
   filter the birthdate column. You can run this query to explore its output:
   SELECT firstname, lastname, birthdate
   FROM employees
   WHERE birthdate > '1970-01-01';

 BETWEEN:
 Another operator used for numeric data as well as date and time data is the BETWEEN operator. BETWEEN filters for numbers or 
 dates within a range. For example, if you want to find the first and last names of all employees hired between January 1, 2002 
 and January 1, 2003, you can use the BETWEEN operator as follows:
 SELECT firstname, lastname, hiredate
 FROM employees
 WHERE hiredate BETWEEN '2002-01-01' AND '2003-01-01';
   
 Note: The BETWEEN operator is inclusive. This means records with a hiredate of January 1, 2002 or January 1, 2003 are included 
 in the results of the previous query.

 AND:
 AND is used to filter on two conditions. AND specifies that both conditions must be met simultaneously. 

 As an example, a cybersecurity concern might affect only those customer accounts that meet both the condition of being handled by 
 a support representative with an ID of 5 and the condition of being located in the USA. To find the names and emails of those 
 specific customers, you should place the two conditions on either side of the AND operator in the WHERE clause:
 SELECT firstname, lastname, email, country, supportrepid
 FROM customers
 WHERE supportrepid = 5 AND country = 'USA';

 OR:
 The OR operator also connects two conditions, but OR specifies that either condition can be met. It returns results where the 
 first condition, the second condition, or both are met.

 For example, if you are responsible for finding all customers who are either in the USA or Canada so that you can communicate 
 information about a security update, you can use an OR operator to find all the needed records. As the following query 
 demonstrates, you should place the two conditions on either side of the OR operator in the WHERE clause:
 SELECT firstname, lastname, email, country
 FROM customers
 WHERE country = 'Canada' OR country = 'USA';

 NOT:
 Unlike the previous two operators, the NOT operator only works on a single condition, and not on multiple ones. The NOT operator 
 negates a condition. This means that SQL returns all records that don’t match the condition specified in the query. 

 For example, if a cybersecurity issue doesn't affect customers in the USA but might affect those in other countries, you can 
 return all customers who are not in the USA. This would be more efficient than creating individual conditions for all of the 
 other countries. To use the NOT operator for this task, write the following query and place NOT directly after WHERE:
 SELECT firstname, lastname, email, country
 FROM customers
 WHERE NOT country = 'USA';

 Pro tip: Another way of finding values that are not equal to a certain value is by using the <> operator or the != operator. For 
 example, WHERE country <> 'USA' and WHERE country != 'USA' are the same filters as WHERE NOT country = 'USA'. 

 Combining logical operators:
 Logical operators can be combined in filters. For example, if you know that both the USA and Canada are not affected by a 
 cybersecurity issue, you can combine operators to return customers in all countries besides these two. In the following query, 
 NOT is placed before the first condition, it's joined to a second condition with AND, and then NOT is also placed before that 
 second condition. You can run it to explore what it returns:
 SELECT firstname, lastname, email, country
 FROM customers
 WHERE NOT country = 'Canada' AND NOT country = 'USA';