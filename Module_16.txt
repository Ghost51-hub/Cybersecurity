Database:
An organized collection of information or data.

Spreadsheets:
 
 ->Designed for a single user or a small

 ->Store less data

Databases:

 ->Accessed by multiple people simultaneously

 ->Store massive amounts of data

 ->Perform complex tasks while accessing data

Relational database:
A structured database containing tables that are related to each other.

 Primary key: A column where every row has a unique entry. 

 Foreign key: A column in a table that is a primary key in another table.

SQL (Structure Query Language):
A programming language used to create, interact with, and request information from a database.

Query:
A request for data from a database table or a combination of tables.

Log:
A record of events that occur within an organization's systems.

Differences between Linux and SQL filtering:
Although both Linux and SQL allow you to filter through data, there are some differences that affect which one you should choose.

 Purpose:
 Linux filters data in the context of files and directories on a computer system. It’s used for tasks like searching for specific 
 files, manipulating file permissions, or managing processes. 

 SQL is used to filter data within a database management system. It’s used for querying and manipulating data stored in tables and 
 retrieving specific information based on defined criteria. 

 Syntax:
 Linux uses various commands and command-line options specific to each filtering tool. Syntax varies depending on the tool and 
 purpose. Some examples of Linux commands are find, sed, cut, e grep

 SQL uses the Structured Query Language (SQL), a standardized language with specific keywords and clauses for filtering data 
 across different SQL databases. Some examples of SQL keywords and clauses are WHERE, SELECT, JOIN.

 Structure:
 SQL offers a lot more structure than Linux, which is more free-form and not as tidy.

 For example, if you wanted to access a log of employee log-in attempts, SQL would have each record separated into columns. Linux 
 would print the data as a line of text without this organization. As a result, selecting a specific column to analyze would be 
 easier and more efficient in SQL.

 In terms of structure, SQL provides results that are more easily readable and that can be adjusted more quickly than when using 
 Linux.

 Joining tables:
 Some security-related decisions require information from different tables. SQL allows the analyst to join multiple tables 
 together when returning data. Linux doesn’t have that same functionality; it doesn’t allow data to be connected to other 
 information on your computer. This is more restrictive for an analyst going through security logs.

 Best uses:
 As a security analyst, it’s important to understand when you can use which tool. Although SQL has a more organized structure and 
 allows you to join tables, this doesn’t mean that there aren’t situations that would require you to filter data in Linux.

 A lot of data used in cybersecurity will be stored in a database format that works with SQL. However, other logs might be in a 
 format that is not compatible with SQL. For instance, if the data is stored in a text file, you cannot search through it with SQL. 
 In those cases, it is useful to know how to filter in Linux. 

Basic SQL querys:
Chinook is an example of a databasethat is used in these queries.

 SELECT:
 The SELECT keyword indicates which columns to return. For example, you can return the customerid column from the Chinook database 
 with

 SELECT customerid

 You can also select multiple columns by separating them with a comma. For example, if you want to return both the customerid and 
 city columns, you should write SELECT customerid, city.

 If you want to return all columns in a table, you can follow the SELECT keyword with an asterisk (*). The first line in the query 
 will be SELECT *.

 FROM:
 The SELECT keyword always comes with the FROM keyword. FROM indicates which table to query. To use the FROM keyword, you should 
 write it after the SELECT keyword, often on a new line, and follow it with the name of the table you’re querying. If you want to 
 return all columns from the customers table, you can write:

 SELECT *

 FROM customers;

 When you want to end the query here, you put a semicolon (;) at the end to tell SQL that this is the entire query.

 ORDER BY:
 Database tables are often very complicated, and this is where other SQL keywords come in handy. ORDER BY is an important keyword 
 for organizing the data you extract from a table.

 ORDER BY sequences the records returned by a query based on a specified column or columns. This can be in either ascending or 
 descending order.
 
  Sorting in ascending order:
  To use the ORDER BY keyword, write it at the end of the query and specify a column to base the sort on. In this example, SQL 
  will return the customerid, city, and country columns from the customers table, and the records will be sequenced by the city 
  column:
  SELECT customerid, city, country
  FROM customers
  ORDER BY city;

  Sorting in descending order:
  You can also use the ORDER BY with the DESC keyword to sort in descending order. The DESC keyword is short for "descending" and 
  tells SQL to sort numbers from largest to smallest, or alphabetically from Z to A. This can be done by following ORDER BY with 
  the DESC keyword. For example, you can run this query to examine how the results differ when DESC is applied: 
  SELECT customerid, city, country
  FROM customers
  ORDER BY city DESC;

  Sorting based on multiple columns:
  You can also choose multiple columns to order by. For example, you might first choose the country and then the city column. SQL 
  then sorts the output by country, and for rows with the same country, it sorts them based on city. You can run this to explore 
  how SQL displays this:
  SELECT customerid, city, country
  FROM customers
  ORDER BY country, city;

 WHERE:
 To create a filter in SQL, you need to use the keyword WHERE. WHERE indicates the condition for a filter.

 If you needed to email employees with a title of IT Staff, you might use a query like the one in the following example. You can 
 run this example to examine what it returns: 
 SELECT firstname, lastname, title, email
 FROM employees
 WHERE title = 'IT Staff';

  Wildcards:
  A wildcard is a special character that can be substituted with any other character. Two of the most useful wildcards are the 
  percentage sign (%) and the underscore (_).
  These wildcards can be placed after a string, before a string, or in both locations depending on the pattern you’re filtering for.