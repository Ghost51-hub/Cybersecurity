Filesystem Hierarchy Standard (FHS):
Previously, you learned that the Filesystem Hierarchy Standard (FHS) is the component of Linux that organizes data. The FHS is 
important because it defines how directories, directory contents, and other storage is organized in the operating system.

Under the FHS, a file’s location can be described by a file path. A file path is the location of a file or directory. In the file 
path, the different levels of the hierarchy are separated by a forward slash (/).

 Root directory:
 The root directory is the highest-level directory in Linux, and it’s always represented with a forward slash (/).  All 
 subdirectories branch off the root directory. Subdirectories can continue branching out to as many levels as necessary.

 Standard FHS directories:
 Directly below the root directory, you’ll find standard FHS directories. Here are a few examples of what standard directories 
 contain:

 ->/home: Each user in the system gets their own home directory.

 ->/bin: This directory stands for “binary” and contains binary files and other executables. Executables are files that contain a 
   series of commands a computer needs to follow to run programs and perform other functions.

 ->/etc: This directory stores the system’s configuration files.

 ->/tmp: This directory stores many temporary files. The /tmp directory is commonly used by attackers because anyone in the system 
   can modify data in these files.

 ->/mnt: This directory stands for “mount” and stores media, such as USB drives and hard drives.

 Pro Tip: You can use the man hier command to learn more about the FHS and its standard directories.

 User-specific subdirectories:
 Under home are subdirectories for specific users. Each user has their own personal subdirectories, such as projects, logs, or 
 reports.

 Note: When the path leads to a subdirectory below the user’s home directory, the user’s home directory can be represented as the 
 tilde (~). For example, /home/analyst/logs can also be represented as ~/logs.

 You can navigate to specific subdirectories using their absolute or relative file paths. The absolute file path is the full file 
 path, which starts from the root. For example, /home/analyst/projects is an absolute file path. The relative file path is the 
 file path that starts from a user's current directory.

 Note: Relative file paths can use a dot (.) to represent the current directory, or two dots (..) to represent the parent of the 
 current directory. An example of a relative file path could be ../projects.

Helpful navigation tips and keyboard shortcuts:
The following contains a list of navigation tips and keyboard shortcuts you may find useful when completing your Linux labs. 
Your cursor must be in the terminal window to use these navigation tips and keyboard shortcuts.

->CTRL + C: Terminates a command that is currently running; from the instructions portion of Qwiklabs, you can use CTRL + C to copy,
but within the terminal, it will only terminate a command and if one isn't running, it will display ^C at the prompt

->CTRL + V: Pastes text

->CTRL + A: Sets your cursor at the beginning of a command

->CTRL + E: Sets your cursor at the end of a command

->Left arrow key: Moves left within a command

->Right arrow key: Moves right within a command

->Up arrow key: Provides the last command you entered into the command line; can be entered multiple times to go through multiple 
  commands from the command history

->Down arrow key: Provides the next command in the command history; must be after using the up arrow key

->Tab key: Provides available suggestions for completing your text

Linux Commands:

 Basic Commands:

  ->application_name: To check if the apllication is installed.

  ->application_name --version: To check the version of installed application.

  ->sudo apt install application_name: To install the application.

  ->sudo apt remove application_name: To uninstall the application.

  ->apt list --installed: It gives the list of application installed.

  ->clear: Clears the terminal screen; this can also be done by entering CTRL + L.

  ->echo: This command in the Bash shell outputs a specified string of text.

  ->expr: This command performs basic mathematical calculation. (put space between the operands and operators)

 Commands for navigating the file system:

  ->pwd: Prints the working directory onto the screen.

  ->ls: Displays the names of files and directories in the current working directory.
   
    Note: If you want to return the contents of a directory that’s not your current working directory, you can add an argument 
    after ls with the absolute or relative file path to the desired directory. For example, if you’re in the /home/analyst 
    directory but want to list the contents of its projects subdirectory, you can enter ls /home/analyst/projects or just ls 
    projects.

  ->cd: Navigates between directories.

    Pro Tip: You can use the relative file path and enter cd .. to go up one level in the file structure. For example, if the 
    current directory is /home/analyst/projects, entering cd .. would change your working directory to /home/analyst. 

  ->cat file_name: Displays the content of a file. 

  ->whoami: This command returns the username of the current user. 
 
  ->head file_name: Displays just the beginning of a file, by default 10 lines.
   
    Pro Tip: If you want to change the number of lines returned by head, you can specify the number of lines by including -n. 
    For example, if you only want to display the first five lines of the updates.txt file, enter head -n 5 updates.txt.

  ->tail file_name: Displays just the end of a file, by default 10 lines.

  ->less file_name: The less command returns the content of a file one page at a time. For example, entering less updates.txt 
    changes the terminal window to display the contents of updates.txt one page at a time. This allows you to easily move forward 
    and backward through the content. 

    Once you’ve accessed your content with the less command, you can use several keyboard controls to move through the file:

     Space bar: Move forward one page

     b: Move back one page

     Down arrow: Move forward one line

     Up arrow: Move back one line

     q: Quit and return to the previous terminal window

 Filtering Commands:-

  ->grep specific_string file_name: This command searches a specified file and returns all lines in the file containing a 
    specified string or text. It commonly takes two arguments: a specific string to search for and a specific file to search 
    through.
